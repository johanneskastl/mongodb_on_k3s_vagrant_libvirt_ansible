---

- name: 'Install MongoDB'
  hosts: 'k3s1'
  gather_facts: true
  become: false
  module_defaults:
    kubernetes.core.helm:
      kubeconfig: './k3s-kubeconfig'
    kubernetes.core.k8s:
      kubeconfig: './k3s-kubeconfig'
    kubernetes.core.k8s_info:
      kubeconfig: './k3s-kubeconfig'

  tasks:

    - name: 'Create the mongodb namespace'
      delegate_to: 'localhost'
      kubernetes.core.k8s:
        name: 'mongodb'
        api_version: 'v1'
        kind: 'Namespace'
        state: 'present'

    - name: 'Create the secret for the MongoDB credentials'
      delegate_to: 'localhost'
      kubernetes.core.k8s:
        name: 'mongodb'
        state: 'present'
        resource_definition: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: mongodb-credentials
            namespace: mongodb
          stringData:
            mongodb-root-password: totallysecure
            mongodb-metrics-password: totallysecure
            mongodb-replica-set-key: totallysecure
            mongodb-passwords: totallysecure

    - name: 'Install MongoDB via the helm chart'
      delegate_to: 'localhost'
      kubernetes.core.helm:
        chart_ref: 'oci://registry-1.docker.io/bitnamicharts/mongodb'
        release_name: 'mongodb'
        release_namespace: 'mongodb'
        release_values:
          global:
            compatibility:
              openshift:
                adaptSecurityContext: disable
          auth:
            existingSecret: mongodb-credentials
            databases:
              - vagrant-libvirt
            usernames:
              - vagrant-libvirt
          architecture: standalone
          replicaCount: 1
          service:
            type: NodePort
          persistence:
            storageClass: local-path
            size: 256Mi

    - name: 'Wait until all pods in the mongodb namespace are running'
      delegate_to: localhost
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: mongodb
      register: pod_list
      until: |
        pod_list | json_query("resources[*].status.phase") | unique | sort == ["Running"]
        or
        pod_list | json_query("resources[*].status.phase") | unique | sort == ["Running", "Succeeded"]
      retries: 12
      delay: 10
